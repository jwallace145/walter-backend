AWSTemplateFormatVersion: "2010-09-09"
Description: "WalterBackend Infrastructure"

##################
### PARAMETERS ###
##################

Parameters:

  AppEnvironment:
    Type: String
    Description: The environment of the WalterBackend stack
    Default: dev
    AllowedValues:
      - dev
      - preprod
      - prod

  WalterAPIImageURI:
    Type: String
    Description: The container image URI of the WalterAPI
    Default: 010526272437.dkr.ecr.us-east-1.amazonaws.com/walter/api:latest

  WalterAPITimeoutSeconds:
    Type: Number
    Description: The timeout in seconds of all WalterAPI endpoints
    Default: 30

  WalterCanariesTimeoutSeconds:
    Type: Number
    Description: The timeout in seconds of all WalterAPI canaries
    Default: 180

  WalterAPILambdaMemorySizeMegabytes:
    Type: Number
    Description: The memory in Megabytes (MB) allocated to the Lambda environments that serve the WalterAPI endpoints
    Default: 256

  WalterAPILambdaProvisionedConcurrencyCount:
    Type: Number
    Description: The number of Lambdas to keep warm for provisioned concurrency to improve WalterAPI latency with respect to cold starts
    Default: 2

  WalterBackendLogLevel:
    Type: String
    Description: The logging level of WalterBackend.
    Default: INFO
    AllowedValues:
      - DEBUG
      - INFO

#################
### RESOURCES ###
#################

Resources:

  ###################
  ### API GATEWAY ###
  ###################

  WalterAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "WalterAPI"
      Description: !Sub "API Gateway for WalterBackend APIs"

  WalterAPIInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPI.Arn}:release"
      Principal: apigateway.amazonaws.com

  ##################
  # AUTHENTICATION #
  ##################

  WalterAPIAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: auth

  WalterAPILoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIAuthResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: login

  WalterAPILoginCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPILoginResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPILoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPILoginResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIRefreshResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIAuthResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: refresh

  WalterAPIRefreshCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIRefreshResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIRefreshMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIRefreshResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPILogoutResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIAuthResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: logout

  WalterAPILogoutCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPILogoutResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPILogoutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPILogoutResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  #########
  # USERS #
  #########

  WalterAPIUsers:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: users

  WalterAPIUsersCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIUsers
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations" # provisioned concurrency -> release alias
      MethodResponses:
        - StatusCode: 200

  WalterAPIUpdateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations" # provisioned concurrency -> release alias
      MethodResponses:
        - StatusCode: 200

  ############
  # ACCOUNTS #
  ############

  WalterAPIAccountsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: accounts

  WalterAPIAccountsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIAccountsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIUpdateAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref WalterAPIAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetAccountsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIDeleteAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId: !Ref WalterAPIAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  ################
  # TRANSACTIONS #
  ################

  WalterAPITransactionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: transactions

  WalterAPITransactionsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPITransactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIGetTransactionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIAddTransactionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIEditTransactionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIDeleteTransactionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  #########
  # PLAID #
  #########

  WalterAPIPlaidResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: plaid

  WalterAPICreateLinkTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIPlaidResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: create-link-token

  WalterAPICreateLinkTokenCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPICreateLinkTokenResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateLinkTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPICreateLinkTokenResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIExchangePublicTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIPlaidResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: exchange-public-token

  WalterAPIExchangePublicTokenCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIExchangePublicTokenResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIExchangePublicTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIExchangePublicTokenResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPISyncTransactionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIPlaidResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: sync-transactions

  WalterAPISyncTransactionsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPISyncTransactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPISyncTransactionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPISyncTransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  ##############
  ### LAMBDA ###
  ##############

  WalterAPIAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPI
      FunctionVersion: {{ walter_api_version }}
      Name: "release"
{#      ProvisionedConcurrencyConfig:#}
{#        ProvisionedConcurrentExecutions: !Ref WalterAPILambdaProvisionedConcurrencyCount#}

  WalterAPI:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-${AppEnvironment}"
      Description: !Sub "The entrypoint function for all APIs included in WalterAPI (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - datadog_lambda.handler.handler
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - "arm64"
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: walter.api_entrypoint
          DD_LOG_LEVEL: !Ref WalterBackendLogLevel
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterBackendLogLevel
      Tags:
        - Key: env
          Value: !Ref AppEnvironment
        - Key: service
          Value: WalterAPI

  WalterWorkflows:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterWorkflows-${AppEnvironment}"
      Description: !Sub "The entrypoint function for all asynchronous workflows in WalterBackend (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - datadog_lambda.handler.handler
      Timeout: 60
      MemorySize: 512
      Architectures:
        - "arm64"
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: walter.workflows_entrypoint
          DD_LOG_LEVEL: !Ref WalterBackendLogLevel
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterBackendLogLevel
      Tags:
        - Key: env
          Value: !Ref AppEnvironment
        - Key: service
          Value: WalterWorkflows

  WalterCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-${AppEnvironment}"
      Description: !Sub "The single entrypoint for all WalterAPI canaries (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - datadog_lambda.handler.handler
      Timeout: !Ref WalterCanariesTimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - "arm64"
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: walter.canaries_entrypoint
          DD_LOG_LEVEL: !Ref WalterBackendLogLevel
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterBackendLogLevel
      Tags:
        - Key: env
          Value: !Ref AppEnvironment
        - Key: service
          Value: WalterCanaries

  #################
  ### IAM ROLES ###
  #################

  WalterAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterAPIRole-${AppEnvironment}"
      Description: "WalterAPI execution role (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ##########
  ### S3 ###
  ##########

  MediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-media-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Effect: Allow
            Resource: !Sub "${MediaBucket.Arn}/*"
            Principal:
              AWS:
                - !GetAtt WalterAPIRole.Arn
          - Action:
              - "s3:ListBucket"
            Effect: Allow
            Resource: !GetAtt MediaBucket.Arn
            Principal:
              AWS:
                - !GetAtt WalterAPIRole.Arn

  TemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-templates-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  ###########
  ### SQS ###
  ###########

  SyncUserTransactionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "SyncUserTransactionsQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 360
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SyncUserTransactionsDeadLetterQueue.Arn
        maxReceiveCount: 1

  SyncUserTransactionsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "SyncUserTransactionsDeadletterQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 90
      MessageRetentionPeriod: 1209600 # two weeks

###############
### OUTPUTS ###
###############

Outputs:
  WalterAPIAuthUserEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/auth"
  WalterAPICreateUserEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/users"
  WalterAPIGetPricesEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/prices"