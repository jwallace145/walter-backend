AWSTemplateFormatVersion: "2010-09-09"
Description: "WalterBackend Infrastructure"

##################
### PARAMETERS ###
##################

Parameters:

  AppEnvironment:
    Type: String
    Description: The environment of the WalterBackend stack
    Default: dev
    AllowedValues:
      - dev
      - preprod
      - prod

  WalterAPIImageURI:
    Type: String
    Description: The container image URI of the WalterAPI
    Default: 010526272437.dkr.ecr.us-east-1.amazonaws.com/walter/api:latest

  WalterAPITimeoutSeconds:
    Type: Number
    Description: The timeout in seconds of all WalterAPI endpoints
    Default: 30

  WalterAPILambdaMemorySizeMegabytes:
    Type: Number
    Description: The memory in Megabytes (MB) allocated to the Lambda environments that serve the WalterAPI endpoints
    Default: 256

  WalterAPILambdaProvisionedConcurrencyCount:
    Type: Number
    Description: The number of Lambdas to keep warm for provisioned concurrency to improve WalterAPI latency with respect to cold starts
    Default: 2

  WalterAPILogLevel:
    Type: String
    Description: The logging level of WalterAPI.
    Default: INFO
    AllowedValues:
      - DEBUG
      - INFO

#################
### RESOURCES ###
#################

Resources:

  ###################
  ### API GATEWAY ###
  ###################

  WalterAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "WalterAPI-${AppEnvironment}"
      Description: !Sub "API Gateway for WalterAPI-${AppEnvironment}"

  WalterAPIInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPI.Arn}:release"
      Principal: apigateway.amazonaws.com

  WalterAPIAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: auth

  WalterAPIAuthUserCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIAuthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIAuthUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIAuthResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIUsers:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: users

  WalterAPICreateUserCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIUsers
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations" # provisioned concurrency -> release alias
      MethodResponses:
        - StatusCode: 200

  WalterAPIUpdateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref WalterAPIUsers
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations" # provisioned concurrency -> release alias
      MethodResponses:
        - StatusCode: 200

  WalterAPIStocks:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: stocks

  WalterAPIGetStockPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPIGetStock.Arn}:release"
      Principal: apigateway.amazonaws.com

  WalterAPIGetStockMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIStocks
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIGetStock.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIAddStockMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIStocks
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIAddStock.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIAddStockCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIStocks
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIAddStockPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPIAddStock.Arn}:release"
      Principal: apigateway.amazonaws.com

  WalterAPIDeleteStockMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId: !Ref WalterAPIStocks
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIDeleteStock.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIDeleteStockPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPIDeleteStock.Arn}:release"
      Principal: apigateway.amazonaws.com

  WalterAPIPrices:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: prices

  WalterAPIGetPricesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIPrices
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIGetPrices.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetPricesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPIGetPrices.Arn}:release"
      Principal: apigateway.amazonaws.com

  WalterAPIGetPortfolioResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: portfolios

  WalterAPIGetPortfolioMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPIGetPortfolioResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPIGetPortfolio.Arn}:release/invocations" # provisioned concurrency -> release alias
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetPortfolioCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIGetPortfolioResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Max-Age: "'86400'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Max-Age: false

  WalterAPIGetPortfolioPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${WalterAPIGetPortfolio.Arn}:release"
      Principal: apigateway.amazonaws.com

  WalterAPIUserAccountsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: accounts

  WalterAPICreditAccountsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIUserAccountsResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: credit

  WalterAPICreditAccountsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPICreditAccountsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateCreditAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPICreditAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIGetCreditAccountsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPICreditAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIDeleteCreditAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId: !Ref WalterAPICreditAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPICashAccountsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: cash-accounts

  WalterAPIGetCashAccountsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPICashAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIUpdateCashAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref WalterAPICashAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIDeleteCashAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId: !Ref WalterAPICashAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPICreateCashAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPICashAccountsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPICashAccountsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPICashAccountsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPITransactionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: transactions

  WalterAPITransactionsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPITransactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIGetTransactionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIAddTransactionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIEditTransactionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIDeleteTransactionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      ResourceId: !Ref WalterAPITransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIPlaidResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WalterAPIGateway.RootResourceId
      RestApiId: !Ref WalterAPIGateway
      PathPart: plaid

  WalterAPICreateLinkTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIPlaidResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: create-link-token

  WalterAPICreateLinkTokenCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPICreateLinkTokenResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPICreateLinkTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPICreateLinkTokenResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPIExchangePublicTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIPlaidResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: exchange-public-token

  WalterAPIExchangePublicTokenCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPIExchangePublicTokenResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPIExchangePublicTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPIExchangePublicTokenResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  WalterAPISyncTransactionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WalterAPIPlaidResource
      RestApiId: !Ref WalterAPIGateway
      PathPart: sync-transactions

  WalterAPISyncTransactionsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WalterAPIGateway
      ResourceId: !Ref WalterAPISyncTransactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WalterAPISyncTransactionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref WalterAPISyncTransactionsResource
      RestApiId: !Ref WalterAPIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WalterAPI.Arn}:release/invocations"
      MethodResponses:
        - StatusCode: 200

  ##############
  ### LAMBDA ###
  ##############

  WalterAPIAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPI
      FunctionVersion: 8
      Name: "release"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref WalterAPILambdaProvisionedConcurrencyCount

  WalterAPI:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-${AppEnvironment}"
      Description: !Sub "The entrypoint function for all APIs included in WalterAPI (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.walter_api_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPIGetStockAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIGetStock
      FunctionVersion: 14
      Name: "release"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref WalterAPILambdaProvisionedConcurrencyCount

  WalterAPIGetStock:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-GetStock-${AppEnvironment}"
      Description: !Sub "WalterAPI: GetStock - Get stock and its details from WalterDB (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.get_stock_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPIAddStockAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIAddStock
      FunctionVersion: 73
      Name: "release"

  WalterAPIAddStock:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-AddStock-${AppEnvironment}"
      Description: !Sub "WalterAPI: AddStock - Add stock and number of shares to user portfolio (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.add_stock_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPIDeleteStockAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIDeleteStock
      FunctionVersion: 70
      Name: "release"

  WalterAPIDeleteStock:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-DeleteStock-${AppEnvironment}"
      Description: !Sub "WalterAPI: DeleteStock - Delete a stock from user portfolio (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.delete_stock_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPIGetPricesAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIGetPrices
      FunctionVersion: 18
      Name: "release"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref WalterAPILambdaProvisionedConcurrencyCount

  WalterAPIGetPrices:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-GetPrices-${AppEnvironment}"
      Description: !Sub "WalterAPI: GetPrices - Get pricing data for a given stock over a timeframe (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.get_prices_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPIGetPortfolioAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIGetPortfolio
      FunctionVersion: 42
      Name: "release"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref WalterAPILambdaProvisionedConcurrencyCount

  WalterAPIGetPortfolio:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-GetPortfolio-${AppEnvironment}"
      Description: !Sub "WalterAPI: GetPortfolio - Get user portfolio from WalterDB (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.get_portfolio_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPICreateLinkTokenAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPICreateLinkToken
      FunctionVersion: 16
      Name: "release"

  WalterAPICreateLinkToken:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-CreateLinkToken-${AppEnvironment}"
      Description: !Sub "WalterAPI: CreateLinkToken - Creates Plaid link token to generate user Plaid connection wizard (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.create_link_token_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPIExchangePublicTokenAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPIExchangePublicToken
      FunctionVersion: 15
      Name: "release"

  WalterAPIExchangePublicToken:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-ExchangePublicToken-${AppEnvironment}"
      Description: !Sub "WalterAPI: ExchangePublicToken - Exchanges Plaid item public token for user access token and saves in WalterDB (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.exchange_public_token_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterAPISyncTransactionsAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterAPISyncTransactions
      FunctionVersion: 6
      Name: "release"

  WalterAPISyncTransactions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterAPI-SyncTransactions-${AppEnvironment}"
      Description: !Sub "WalterAPI: SyncTransactions - The Plaid webhook API endpoint to sync transactions for the given user when updates are available (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Ref WalterAPIImageURI
      ImageConfig:
        Command:
          - walter.sync_transactions_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryAuthUserCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryAuthUserCanary
      FunctionVersion: $LATEST
      Name: !Sub "WalterCanary-AuthUserCanary-${AppEnvironment}"

  WalterCanaryAuthUserCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-AuthUserCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: AuthUser - Call the AuthUser API with the canary account credentials to verify authentication (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.auth_user_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetTransactionsAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetTransactions
      FunctionVersion: $LATEST
      Name: "release"

  WalterCanaryGetTransactions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetTransactions-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetTransactions - Call the GetTransactions API to ensure users are able to retrieve transactions from WalterDB (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_transactions_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetUserCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetUserCanary
      FunctionVersion: $LATEST
      Name: !Sub "WalterCanary-GetUserCanary-${AppEnvironment}"

  WalterCanaryGetUserCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetUserCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetUser - Call the GetUser API with the canary account identity token and verify user identification (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_user_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetStockCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetStockCanary
      FunctionVersion: $LATEST
      Name: !Sub "WalterCanary-GetStockCanary-${AppEnvironment}"

  WalterCanaryGetStockCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetStockCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetStock - Call the GetStock API to get the stock information stored in WalterDB (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_stock_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetPortfolioCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetPortfolioCanary
      FunctionVersion: $LATEST
      Name: !Sub "WalterCanary-GetPortfolioCanary-${AppEnvironment}"

  WalterCanaryGetPortfolioCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetPortfolioCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetPortfolio - Call the GetPortfolio API for the canary account to verify users can get their portfolio information (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_portfolio_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetPricesCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetPricesCanary
      FunctionVersion: $LATEST
      Name: "release"

  WalterCanaryGetPricesCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetPricesCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetPricesCanary - Call the GetPrices API to verify the ability to get the latest stock market pricing data (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_prices_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetNewsSummaryCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetNewsSummaryCanary
      FunctionVersion: $LATEST
      Name: "release"

  WalterCanaryGetNewsSummaryCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetNewsSummaryCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetNewsSummaryCanary - Call the GetNewsSummary API and get the latest stock market news summaries (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_news_summary_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanaryGetNewslettersCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanaryGetNewslettersCanary
      FunctionVersion: $LATEST
      Name: "release"

  WalterCanaryGetNewslettersCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-GetNewsletters-${AppEnvironment}"
      Description: !Sub "WalterCanary: GetNewsletters - Call the GetNewsletters API and get the latest newsletters for the user (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.get_newsletters_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  WalterCanarySearchStocksCanaryAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref WalterCanarySearchStocksCanary
      FunctionVersion: $LATEST
      Name: "release"

  WalterCanarySearchStocksCanary:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "WalterCanary-SearchStocksCanary-${AppEnvironment}"
      Description: !Sub "WalterCanary: SearchStocksCanary - Call the SearchStocks API to get stocks that are similar to the given identifier to verify user search functionality (${AppEnvironment})"
      PackageType: Image
      Role: !GetAtt WalterAPIRole.Arn
      Code:
        ImageUri: !Sub "${WalterAPIImageURI}"
      ImageConfig:
        Command:
          - walter.search_stocks_canary_entrypoint
      Timeout: !Ref WalterAPITimeoutSeconds
      MemorySize: !Ref WalterAPILambdaMemorySizeMegabytes
      Architectures:
        - !Ref WalterAPILambdaArchitecture
      Environment:
        Variables:
          DOMAIN: DEVELOPMENT
          LOG_LEVEL: !Ref WalterAPILogLevel

  ################
  ### DYNAMODB ###
  ################

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: date_uuid
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: date_uuid
          KeyType: RANGE
      TableName: !Sub "Transactions-${AppEnvironment}"

  CashAccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: account_id
          KeyType: RANGE
      TableName: !Sub "CashAccounts-${AppEnvironment}"

  CreditAccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: account_id
          KeyType: RANGE
      TableName: !Sub "CreditAccounts-${AppEnvironment}"

  StocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: symbol
            KeyType: HASH
      TableName: !Sub "Stocks-${AppEnvironment}"

  UsersStocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: stock_symbol
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: stock_symbol
            KeyType: RANGE
      TableName: !Sub "UsersStocks-${AppEnvironment}"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Users-${AppEnvironment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: !Sub "Users-EmailIndex-${AppEnvironment}"
          KeySchema:
            - AttributeName: 'email'
              KeyType: 'HASH'
          Projection:
            ProjectionType: 'ALL'

  PlaidItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "PlaidItems-${AppEnvironment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: item_id
          AttributeType: S
        - AttributeName: institution_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: item_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !Sub "PlaidItems-UserInstitutionIndex-${AppEnvironment}"
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: institution_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: !Sub "PlaidItems-ItemIdIndex-${AppEnvironment}"
          KeySchema:
            - AttributeName: item_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  #################
  ### IAM ROLES ###
  #################

  WalterAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterAPIRole-${AppEnvironment}"
      Description: "WalterAPI execution role to read and modify WalterDB and send newsletters (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterNewslettersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterNewslettersRole-${AppEnvironment}"
      Description: "WalterNewsletters role to send newsletter requests to the queue (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterWorkflowAddNewsSummaryRequestsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterWorkflow-AddNewsSummaryRequestsRole-${AppEnvironment}"
      Description: !Sub "WalterWorkflow-AddNewsSummaryRequests-${AppEnvironment} role to add news summary requests to queue for asynchronous processing."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterWorkflowCreateNewsSummaryAndArchiveRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterWorkflow-CreateNewsSummaryAndArchiveRole-${AppEnvironment}"
      Description: !Sub "WalterWorkflow-CreateNewsSummaryAndArchive role to create news summaries and archive in S3 (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WalterBackendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "WalterBackendRole-${AppEnvironment}"
      Description: "WalterBackend execution role write and send newsletters (${AppEnvironment})"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ####################
  ### IAM POLICIES ###
  ####################

  BedrockAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "BedrockAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "bedrock:InvokeModel"
            Resource:
              - "arn:aws:bedrock:us-east-1::foundation-model/amazon.nova-micro-v1:0"
              - "arn:aws:bedrock:us-east-1::foundation-model/amazon.nova-lite-v1:0"
              - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0"
              - "arn:aws:bedrock:us-east-1:010526272437:inference-profile/us.anthropic.claude-3-5-sonnet-20241022-v2:0"
              - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
              - "arn:aws:bedrock:us-east-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
              - "arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
              - "arn:aws:bedrock:us-east-1:010526272437:inference-profile/us.meta.llama3-3-70b-instruct-v1:0"
              - "arn:aws:bedrock:us-east-1::foundation-model/meta.llama3-3-70b-instruct-v1:0"
              - "arn:aws:bedrock:us-east-2::foundation-model/meta.llama3-3-70b-instruct-v1:0"
              - "arn:aws:bedrock:us-west-2::foundation-model/meta.llama3-3-70b-instruct-v1:0"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  CloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "CloudWatchAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole
        - !Ref WalterNewslettersRole
        - !Ref WalterWorkflowAddNewsSummaryRequestsRole
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  NewslettersBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: !Sub "${NewslettersBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:List*"
            Resource: !GetAtt NewslettersBucket.Arn
      Roles:
        - !Ref WalterBackendRole
        - !Ref WalterAPIRole

  NewslettersQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt NewslettersQueue.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole

  SyncUserTransactionsQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SyncUserTransactionsQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt SyncUserTransactionsQueue.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole

  SyncUserTransactionsDeadLetterQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SyncUserTransactionsDeadLetterQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt SyncUserTransactionsDeadLetterQueue.Arn
      Roles:
        - !Ref WalterBackendRole
        - !Ref WalterAPIRole

  NewslettersDeadLetterQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewslettersDeadLetterQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt NewslettersDeadLetterQueue.Arn
      Roles:
        - !Ref WalterBackendRole

  NewsSummariesQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewsSummariesQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt NewsSummariesQueue.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterWorkflowAddNewsSummaryRequestsRole
        - !Ref WalterBackendRole
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  NewsSummariesDeadLetterQueueAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "NewsSummariesDeadLetterQueueAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:SendMessage"
            Resource: !GetAtt NewsSummariesDeadLetterQueue.Arn
      Roles:
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SecretsManagerAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:AlphaVantageAPIKey-F7qJAw"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:AlphaVantagePremiumAPIKey-xB99wz"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:PolygonAPIKey-vZymuJ"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:JWTSecretKey-E5va6r"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:JWTVerifyEmailSecretAccessKey-9KhIYG"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:JWTChangePasswordSecretKey-f0RsUz"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:StockNewsAPIKey-elCcnH"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:StripeTestSecretKey-8vIZfy"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: !Join
              - ""
              - - "arn:aws:secretsmanager:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":secret:PlaidSandboxCredentials-GtcPUQ"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole
        - !Ref WalterWorkflowAddNewsSummaryRequestsRole
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  SimpleEmailSerivceAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "SimpleEmailServiceAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ses:Send*"
            Resource: "*"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  StocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "StocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt StocksTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole
        - !Ref WalterWorkflowAddNewsSummaryRequestsRole
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  TemplatesBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "TemplatesBucketAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "${TemplatesBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:List*"
            Resource: !GetAtt TemplatesBucket.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  TransactionsTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "TransactionsTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt TransactionsTable.Arn
      Roles:
        - !Ref WalterAPIRole

  CashAccountsTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "CashAccountsTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt CashAccountsTable.Arn
      Roles:
        - !Ref WalterAPIRole

  CreditAccountsTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "CreditAccountsTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt CreditAccountsTable.Arn
      Roles:
        - !Ref WalterAPIRole

  UsersStocksTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersStocksTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt UsersStocksTable.Arn
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole

  UsersTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "UsersTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt UsersTable.Arn
          - Effect: Allow
            Action:
              - "dynamodb:Query"
            Resource:
              - !Join
                - ""
                - - "arn:aws:dynamodb:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":table/"
                  - !Sub "Users-${AppEnvironment}"
                  - "/index/"
                  - !Sub "Users-EmailIndex-${AppEnvironment}"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterNewslettersRole
        - !Ref WalterBackendRole

  PlaidItemsTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "PlaidItemsTableAccessPolicy-${AppEnvironment}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGet*"
              - "dynamodb:Get*"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWrite*"
              - "dynamodb:Delete*"
              - "dynamodb:Update*"
              - "dynamodb:PutItem"
            Resource: !GetAtt PlaidItemsTable.Arn
          - Effect: Allow
            Action:
              - "dynamodb:Query"
            Resource:
              - !Join
                - ""
                - - "arn:aws:dynamodb:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":table/"
                  - !Sub "PlaidItems-${AppEnvironment}"
                  - "/index/"
                  - !Sub "PlaidItems-UserInstitutionIndex-${AppEnvironment}"
          - Effect: Allow
            Action:
              - "dynamodb:Query"
            Resource:
              - !Join
                - ""
                - - "arn:aws:dynamodb:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":table/"
                  - !Sub "PlaidItems-${AppEnvironment}"
                  - "/index/"
                  - !Sub "PlaidItems-ItemIdIndex-${AppEnvironment}"
      Roles:
        - !Ref WalterAPIRole
        - !Ref WalterBackendRole
        - !Ref WalterWorkflowAddNewsSummaryRequestsRole
        - !Ref WalterWorkflowCreateNewsSummaryAndArchiveRole

  ##########
  ### S3 ###
  ##########

  MediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-media-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Effect: Allow
            Resource: !Sub "${MediaBucket.Arn}/*"
            Principal:
              AWS:
                - !GetAtt WalterAPIRole.Arn
          - Action:
              - "s3:ListBucket"
            Effect: Allow
            Resource: !GetAtt MediaBucket.Arn
            Principal:
              AWS:
                - !GetAtt WalterAPIRole.Arn

  NewslettersBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-newsletters-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteOldNewsletters"
            Status: "Enabled"
            ExpirationInDays: 30

  NewslettersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewslettersBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:PutObject"
            Effect: Allow
            Resource: !Sub "${NewslettersBucket.Arn}/*"
            Principal:
              AWS: !GetAtt WalterBackendRole.Arn

  NewsSummariesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-news-summaries-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteOldNewsSummaries"
            Status: "Enabled"
            ExpirationInDays: 30

  NewsSummariesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewsSummariesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Effect: Allow
            Resource: !Sub "${NewsSummariesBucket.Arn}/*"
            Principal:
              AWS:
                - !GetAtt WalterAPIRole.Arn
                - !GetAtt WalterBackendRole.Arn
                - !GetAtt WalterWorkflowCreateNewsSummaryAndArchiveRole.Arn
          - Action:
              - "s3:ListBucket"
            Effect: Allow
            Resource: !Sub "${NewsSummariesBucket.Arn}"
            Principal:
              AWS:
                - !GetAtt WalterAPIRole.Arn
                - !GetAtt WalterBackendRole.Arn
                - !GetAtt WalterWorkflowCreateNewsSummaryAndArchiveRole.Arn

  TemplatesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "walterai-templates-${AppEnvironment}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled

  TemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplatesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "${TemplatesBucket.Arn}/*"
            Principal:
              AWS: !GetAtt WalterBackendRole.Arn
          - Action:
              - "s3:List*"
            Effect: Allow
            Resource: !GetAtt TemplatesBucket.Arn
            Principal:
              AWS: !GetAtt WalterBackendRole.Arn

  ###########
  ### SQS ###
  ###########

  SyncUserTransactionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "SyncUserTransactionsQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 360
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SyncUserTransactionsDeadLetterQueue.Arn
        maxReceiveCount: 1

  SyncUserTransactionsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "SyncUserTransactionsDeadletterQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 90
      MessageRetentionPeriod: 1209600 # two weeks

  NewslettersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "NewslettersQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 360
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt NewslettersDeadLetterQueue.Arn
        maxReceiveCount: 1

  NewslettersDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "NewslettersDeadLetterQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 90
      MessageRetentionPeriod: 1209600 # two weeks

  NewsSummariesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "NewsSummariesQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 360
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt NewsSummariesDeadLetterQueue.Arn
        maxReceiveCount: 1

  NewsSummariesDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "NewsSummariesDeadLetterQueue-${AppEnvironment}"
      SqsManagedSseEnabled: true
      VisibilityTimeout: 90
      MessageRetentionPeriod: 1209600 # two weeks

###############
### OUTPUTS ###
###############

Outputs:
  WalterAPIAuthUserEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/auth"
  WalterAPICreateUserEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/users"
  WalterAPIAddStockEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/stocks"
  WalterAPIDeleteStockEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/stocks"
  WalterAPIGetPortfolioEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/portfolios"
  WalterAPIGetPricesEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/prices"
  WalterAPIGetNewsSummaryEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/news"
  WalterAPISendNewsletterEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/newsletters"
  WalterAPISubscribeEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/subscribe"
  WalterAPIUnsubscribeEndpoint:
    Value: !Sub "https://${WalterAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${AppEnvironment}/unsubscribe"