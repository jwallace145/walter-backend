/***************************
 * WalterBackend Variables *
 ***************************/

variable "account_id" {
  description = "The 12-digit account ID of the WalterAI AWS account."
  type        = string

  validation {
    condition     = contains(["010526272437"], var.account_id)
    error_message = "The WalterAI account_id must be in: ['010526272437']."
  }
}

variable "region" {
  description = "The AWS region of the deployment region in the AWS account."
  type        = string

  validation {
    condition     = contains(["us-east-1"], var.region)
    error_message = "The WalterBackend deployment region must be in: ['us-east-1']."
  }
}

variable "walter_backend_version" {
  description = "The version of the WalterBackend application."
  type        = string
}

variable "domain" {
  description = "The domain of WalterBackend."
  type        = string

  validation {
    condition     = contains(["dev", "stg", "prod"], var.domain)
    error_message = "The domain must be 'dev', 'stg', or 'prod'."
  }
}

variable "log_level" {
  description = "The logging level of WalterBackend."
  type        = string

  validation {
    condition     = contains(["DEBUG", "INFO"], var.log_level)
    error_message = "The log_level must be 'DEBUG' or 'INFO'."
  }
}

variable "log_retention_in_days" {
  description = "The number of days to retain the application logs generated by WalterBackend before automatic deletion."
  type        = number

  validation {
    condition     = var.log_retention_in_days >= 0 && var.log_retention_in_days < 365
    error_message = "The log_retention_in_days must be between 1 day and 365 days."
  }
}

variable "api_timeout_seconds" {
  description = "The timeout in seconds of all API endpoints."
  type        = number

  validation {
    condition     = var.api_timeout_seconds >= 5 && var.api_timeout_seconds <= 60
    error_message = "The api_timeout_seconds must be between 5 and 60 seconds (1 minute)."
  }
}

variable "api_lambda_memory_mb" {
  description = "The memory in Megabytes (MB) allocated to the Lambda environments that serve the API endpoints."
  type        = number

  validation {
    condition     = var.api_lambda_memory_mb >= 128 && var.api_lambda_memory_mb <= 10240
    error_message = "The api_lambda_memory_mb must be between 128 and 10240 MB (10 GB)."
  }
}

variable "api_provisioned_concurrent_executions" {
  description = "The provisioned number of concurrent executions allowed for the API function."
  type        = number

  validation {
    condition     = var.api_provisioned_concurrent_executions >= 1 && var.api_provisioned_concurrent_executions <= 5
    error_message = "The api_provisioned_concurrent_executions must be between 1 and 5."
  }
}

variable "canary_timeout_seconds" {
  description = "The timeout in seconds of all API canaries."
  type        = number

  validation {
    condition     = var.canary_timeout_seconds >= 5 && var.canary_timeout_seconds <= 60
    error_message = "The canary_timeout_seconds must be between 5 and 60 seconds (1 minute)."
  }
}

variable "canary_lambda_memory_mb" {
  description = "The memory in Megabytes (MB) allocated to the Lambda environments that serve the API canaries."
  type        = number

  validation {
    condition     = var.canary_lambda_memory_mb >= 128 && var.canary_lambda_memory_mb <= 10240
    error_message = "The canary_lambda_memory_mb must be between 128 and 10240 MB (10 GB)."
  }
}


variable "canary_provisioned_concurrent_executions" {
  description = "The provisioned number of concurrent executions allowed for the Canary function."
  type        = number

  validation {
    condition     = var.canary_provisioned_concurrent_executions >= 1 && var.canary_provisioned_concurrent_executions <= 5
    error_message = "The canary_provisioned_concurrent_executions must be between 1 and 5."
  }
}


variable "workflow_timeout_seconds" {
  description = "The timeout in seconds of all asynchronous workflows."
  type        = number
  default     = 180

  validation {
    condition     = var.workflow_timeout_seconds >= 5 && var.workflow_timeout_seconds <= 180
    error_message = "The workflow_timeout_seconds must be between 5 and 180 seconds (3 minutes)."
  }
}

variable "workflow_lambda_memory_mb" {
  description = "The memory in Megabytes (MB) allocated to the Lambda environments that serve the workflows."
  type        = number
  default     = 1024

  validation {
    condition     = var.workflow_lambda_memory_mb >= 128 && var.workflow_lambda_memory_mb <= 10240
    error_message = "The workflow_lambda_memory_mb must be between 128 and 10240 MB (10 GB)."
  }
}

variable "workflow_provisioned_concurrent_executions" {
  description = "The provisioned number of concurrent executions allowed for the Workflow function."
  type        = number

  validation {
    condition     = var.workflow_provisioned_concurrent_executions >= 1 && var.workflow_provisioned_concurrent_executions <= 5
    error_message = "The workflow_provisioned_concurrent_executions must be between 1 and 5."
  }
}


variable "sync_transactions_max_concurrency" {
  description = "The maximum number of concurrent Lambdas allowed to process sync transaction events."
  type        = number
  default     = 2

  validation {
    condition     = var.sync_transactions_max_concurrency >= 2 && var.sync_transactions_max_concurrency <= 1000
    error_message = "The sync_transactions_max_concurrency must be between 2 and 1000."
  }
}

variable "sync_transactions_max_retry_attempts" {
  description = "The maximum number of times to retry sync transaction tasks before delivering them to the dead-letter queue."
  type        = number
  default     = 3

  validation {
    condition     = var.sync_transactions_max_retry_attempts >= 1 && var.sync_transactions_max_retry_attempts <= 10
    error_message = "The sync_transaction_max_retry_attempts must be between 1 and 10."
  }
}

variable "access_token_secret_key" {
  description = "The secret key used to create access tokens used for API authentication."
  type        = string
}

variable "refresh_token_secret_key" {
  description = "The secret key used to create refresh tokens used for API authentication."
  type        = string
}

variable "datadog_api_key" {
  description = "The Datadog API key used to send metrics to Datadog."
  type        = string
}

variable "datadog_app_key" {
  description = "The Datadog application key used to send metrics to Datadog."
  type        = string
}

variable "datadog_site" {
  description = "The Datadog site used to send metrics and logs to Datadog."
  type        = string
}

variable "plaid_client_id" {
  description = "The Plaid client ID used to authenticate with Plaid."
  type        = string
}

variable "plaid_secret" {
  description = "The Plaid secret used to authenticate with Plaid."
  type        = string
}

variable "polygon_api_key" {
  description = "The Polygon API key used to make requests to Polygon for financial data."
  type        = string
}

variable "stripe_secret_key" {
  description = "The secret key used to interact with the WalterAI Stripe account for customer billing."
  type        = string
}


