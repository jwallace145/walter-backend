name: Deploy WalterBackend to Development

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  TF_VERSION: '1.13.0'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to retrieve git history and tags

      - name: Set up Docker Buildx for cross-platform builds
        uses: docker/setup-buildx-action@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pipenv for dependency management
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Generate requirements from pipenv
        run: |
          pipenv requirements --dev > requirements.txt

      - name: Install dependencies from requirements
        run: |
          pip install -r requirements.txt

      - name: Configure AWS credentials for WalterAI account access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy new latest WalterBackend image to ECR
        run: python deploy.py

      - name: Setup Terraform v1.13.0
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Make Terraform apply script executable
        run: chmod +x ./infra/scripts/apply.sh

      - name: Deploy Terraform infrastructure via apply script
        id: terraform-apply
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
          DATADOG_SITE: ${{ secrets.DATADOG_SITE }}
          ACCESS_TOKEN_SECRET_KEY: ${{ secrets.ACCESS_TOKEN_SECRET_KEY }}
          REFRESH_TOKEN_SECRET_KEY: ${{ secrets.REFRESH_TOKEN_SECRET_KEY }}
          PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
          PLAID_SECRET: ${{ secrets.PLAID_SECRET }}
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        run: |
          echo "Deploying Terraform infrastructure changes..."
          
          if ./infra/scripts/apply.sh dev; then
            echo "terraform-result=success" >> $GITHUB_OUTPUT
            echo "✅ Terraform deployment completed successfully"
          else
            echo "terraform-result=failure" >> $GITHUB_OUTPUT
            echo "❌ Terraform deployment failed"
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image (ECR) | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.terraform-apply.outputs.terraform-result }}" == "success" ]]; then
            echo "| Terraform Infrastructure | ✅ Applied Successfully |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Terraform Infrastructure | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** dev" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY