openapi: 3.0.0
info:
  title: Walter API
  version: 1.0.0
  description: The API that serves the Walter AI financial assistant.
servers:
  - url: https://hy447lxnrd.execute-api.us-east-1.amazonaws.com/{environment}
    description: The API Gateway endpoint for the Walter API.
    variables:
      environment:
        default: dev
        enum:
          - dev
paths:
  /auth/login:
    post:
      summary: Login
      description: >
        Authenticates a user using their email and password and returns access and refresh tokens.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
            example:
              email: test@gmail.com
              password: test_password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                Service: WalterAPI
                API: Login
                Status: Success
                Message: User logged in successfully!
                ResponseTimeMillis: 500.000000
                Data:
                  user_id: user-123456
                  access_token: ACCESS_TOKEN
                  refresh_token: REFRESH_TOKEN
                  access_token_expires_at: "2025-08-09T12:00:00+00:00"
                  refresh_token_expires_at: "2025-08-10T12:00:00+00:00"
  /auth/refresh:
    post:
      summary: Refresh access token
      description: >
        Accepts a refresh token via Authorization Bearer header and issues a new access token.
      operationId: refreshAccessToken
      security:
        - bearerAuth: [ ]
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: 'Bearer <refresh_token>'
      responses:
        '200':
          description: Access token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
              example:
                Service: WalterAPI
                API: Refresh
                Status: Success
                Message: Access token refreshed!
                ResponseTimeMillis: 500.000000
                Data:
                  access_token: NEW_ACCESS_TOKEN
                  access_token_expiration: "2025-08-09T13:00:00+00:00"
  /auth/logout:
    post:
      summary: Logout
      description: >
        Revokes the current session so that associated access and refresh tokens are no longer valid.
        Requires a valid Bearer access token in the Authorization header.
      operationId: logout
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
              example:
                Service: WalterAPI
                API: Logout
                Status: Success
                Message: User logged out successfully!
                ResponseTimeMillis: 500.000000
  /users:
    post:
      summary: Create a new user
      description: >
        Creates a new user account. This endpoint does not require authentication.
        Provide a valid email, first and last name, and a secure password.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              email: test@gmail.com
              first_name: Walter
              last_name: White
              password: test_password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
              example:
                Service: WalterAPI
                API: CreateUser
                Status: Success
                Message: User created!
                ResponseTimeMillis: 500.000000
                Data:
                  user:
                    user_id: user-123456
                    email: test@gmail.com
                    first_name: Walter
                    last_name: White
                    sign_up_date: "2025-08-09T12:00:00+00:00"
                    last_active_date: "2025-08-09T12:00:00+00:00"
                    verified: false
  /accounts:
    get:
      summary: Retrieve user accounts
      description: >
        Returns the user's accounts and aggregate balance.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: getAccounts
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountsResponse'
              example:
                Service: WalterAPI
                API: GetAccounts
                Status: Success
                Message: Successfully retrieved accounts!
                ResponseTimeMillis: 500.000000
                Data:
                  total_num_accounts: 2
                  total_balance: 12345.67
                  accounts:
                    - account_id: acct-123456
                      user_id: user-abc
                      account_type: depository
                      account_subtype: checking
                      institution_name: Test Bank
                      account_name: Checking
                      account_mask: "1234"
                      balance: 1000.00
                      created_at: "2025-08-08T12:00:00+00:00"
                      updated_at: "2025-08-09T12:00:00+00:00"
                      logo_url: https://example.com/logo.svg
                    - account_id: acct-789012
                      user_id: user-abc
                      account_type: credit
                      account_subtype: credit card
                      institution_name: Test Bank
                      account_name: Visa
                      account_mask: "5678"
                      balance: -200.00
                      created_at: "2025-08-08T12:00:00+00:00"
                      updated_at: "2025-08-09T12:00:00+00:00"
                      logo_url: https://example.com/logo.svg
    post:
      summary: Create a new account
      description: >
        Creates a new account for the authenticated user.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: createAccount
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
            example:
              account_type: depository
              account_subtype: checking
              institution_name: Test Bank
              account_name: Checking
              account_mask: "1234"
              balance: 1000.00
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
              example:
                Service: WalterAPI
                API: CreateAccount
                Status: Success
                Message: Account created successfully!
                ResponseTimeMillis: 500.000000
                Data:
                  account:
                    account_id: acct-123456
                    user_id: user-abc
                    account_type: depository
                    account_subtype: checking
                    institution_name: Test Bank
                    account_name: Checking
                    account_mask: "1234"
                    balance: 1000.00
                    created_at: "2025-08-08T12:00:00+00:00"
                    updated_at: "2025-08-08T12:00:00+00:00"
                    logo_url: https://example.com/logo.svg
    put:
      summary: Update an existing account
      description: >
        Updates an existing account for the authenticated user.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: updateAccount
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
            example:
              account_id: acct-123456
              account_type: depository
              account_subtype: savings
              institution_name: Test Bank
              account_name: Rainy Day
              account_mask: "1234"
              balance: 1500.00
              logo_url: https://example.com/logo.svg
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccountResponse'
              example:
                Service: WalterAPI
                API: UpdateAccount
                Status: Success
                Message: Account updated successfully!
                ResponseTimeMillis: 500.000000
                Data:
                  account:
                    account_id: acct-123456
                    user_id: user-abc
                    account_type: depository
                    account_subtype: savings
                    institution_name: Test Bank
                    account_name: Rainy Day
                    account_mask: "1234"
                    balance: 1500.00
                    created_at: "2025-08-08T12:00:00+00:00"
                    updated_at: "2025-08-09T12:00:00+00:00"
                    logo_url: https://example.com/logo.svg
    delete:
      summary: Delete an account
      description: >
        Deletes an account for the authenticated user.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: deleteAccount
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountRequest'
            example:
              account_id: acct-123456
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAccountResponse'
              example:
                Service: WalterAPI
                API: DeleteAccount
                Status: Success
                Message: Successfully deleted account!
                ResponseTimeMillis: 500.000000
  /transactions:
    get:
      summary: Retrieve user transactions
      description: >
        Returns transactions for a specific date range, scoped either to a user or a specific account.
        Provide either user_id or account_id as query parameters; at least one is required. If both are provided, account_id is preferred. Requires a valid Bearer token in the Authorization header.
      operationId: getTransactions
      security:
        - bearerAuth: [ ]
      parameters:
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: The start date for the transaction range (YYYY-MM-DD)
          example: "2025-08-01"
        - name: end_date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: The end date for the transaction range (YYYY-MM-DD)
          example: "2025-08-08"
        - name: account_id
          in: query
          required: false
          schema:
            type: string
          description: Optional. If provided, transactions will be scoped to this account. At least one of user_id or account_id must be provided.
          example: "acct-123456"
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: Optional. If account_id is not provided, transactions will be scoped to this user. At least one of user_id or account_id must be provided.
          example: "user-123456"
      responses:
        '200':
          description: Successfully retrieved transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
              example:
                Service: WalterAPI
                API: GetTransactions
                Status: Success
                Message: Retrieved transactions!
                ResponseTimeMillis: 500.000000
                Data:
                  num_transactions: 3
                  num_unreviewed_transactions: 1
                  total_income: 5000.00
                  total_expense: 2000.00
                  cash_flow: 3000.00
                  transactions:
                    - account_id: account-000
                      transaction_id: abc1
                      date: "2025-08-05"
                      vendor: Salary
                      amount: 5000.00
                      category: INCOME
                      reviewed: true
                    - account_id: account-000
                      transaction_id: abc2
                      date: "2025-08-06"
                      vendor: Grocery Store
                      amount: -100.00
                      category: GROCERIES
                      reviewed: true
                    - account_id: account-001
                      transaction_id: abc3
                      date: "2025-08-07"
                      vendor: Restaurant
                      amount: -50.00
                      category: DINING
                      reviewed: false

    post:
      summary: Add a new transaction
      description: >
        Adds a new transaction for the user.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: addTransaction
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTransactionRequest'
            example:
              account_id: account-12345
              date: "2025-08-08"
              amount: -5.00
              transaction_type: banking
              transaction_subtype: debit
              transaction_category: Groceries
              merchant_name: Coffee Shop
      responses:
        '201':
          description: Transaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTransactionResponse'
              example:
                Service: WalterAPI
                API: AddTransaction
                Status: Success
                Message: Transaction added!
                ResponseTimeMillis: 500.000000
                Data:
                  transaction:
                    transaction_id: bank-txn-12345678
                    user_id: user-12345
                    account_id: account-12345
                    transaction_type: banking
                    transaction_subtype: debit
                    transaction_category: Groceries
                    transaction_date: "2025-08-08#bank-txn-12345678"
                    transaction_amount: -5.00
                    merchant_name: Coffee Shop

    put:
      summary: Edit an existing transaction
      description: >
        Edits an existing transaction for the user.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: editTransaction
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTransactionRequest'
            example:
              transaction_date: "2025-08-07"
              transaction_id: ghi789
              updated_date: "2025-08-07"
              updated_vendor: Nice Restaurant
              updated_amount: -75.00
              updated_category: DINING
      responses:
        '200':
          description: Transaction edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditTransactionResponse'
              example:
                Service: WalterAPI
                API: EditTransaction
                Status: Success
                Message: Transaction edited!
                ResponseTimeMillis: 500.000000
                Data:
                  transaction:
                    transaction_id: ghi789
                    user_id: user-12345
                    account_id: account-12345
                    date: "2025-08-07"
                    vendor: Nice Restaurant
                    amount: -75.00
                    category: DINING
                    reviewed: true

    delete:
      summary: Delete a transaction
      description: >
        Deletes an existing transaction for the user.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: deleteTransaction
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTransactionRequest'
            example:
              transaction_date: "2025-08-08"
              transaction_id: jkl012
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTransactionResponse'
              example:
                Service: WalterAPI
                API: DeleteTransaction
                Status: Success
                Message: Transaction deleted!
                ResponseTimeMillis: 500.000000
  /plaid/create-link-token:
    post:
      summary: Create a Plaid link token
      description: >
        Creates a link token for Plaid Link that can be used to initialize Plaid Link.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: createLinkToken
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Link token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLinkTokenResponse'
              example:
                Service: WalterAPI
                API: CreateLinkToken
                Status: Success
                Message: Created link token successfully!
                ResponseTimeMillis: 500.000000
                Data:
                  link_token: link-sandbox-12345-abcde
                  expiration: "2025-08-09T22:07:00.000000+00:00"
                  request_id: request-id-12345
                  
  /plaid/exchange-public-token:
    post:
      summary: Exchange a Plaid public token for an access token
      description: >
        Exchanges a temporary public token from Plaid Link for a permanent access token.
        Creates accounts in the database and triggers transaction sync.
        Requires a valid Bearer token in the `Authorization` header.
      operationId: exchangePublicToken
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangePublicTokenRequest'
            example:
              public_token: public-sandbox-12345-abcde
              institution_id: ins_123456
              institution_name: Test Bank
              accounts:
                - account_id: acc_12345
                  account_name: Checking
                  account_type: depository
                  account_subtype: checking
                  account_last_four_numbers: "1234"
      responses:
        '200':
          description: Public token exchanged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangePublicTokenResponse'
              example:
                Service: WalterAPI
                API: ExchangePublicToken
                Status: Success
                Message: Tokens exchanged successfully!
                ResponseTimeMillis: 500.000000
                Data:
                  institution_name: Test Bank
                  num_accounts: 1
                  
  /plaid/sync-transactions:
    post:
      summary: Sync transactions from Plaid
      description: >
        Syncs transactions from Plaid for a specific item.
        This endpoint is called by Plaid webhooks when new transactions are available.
      operationId: syncTransactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncTransactionsRequest'
            example:
              item_id: item-sandbox-12345-abcde
              webhook_code: TRANSACTIONS_UPDATE
      responses:
        '200':
          description: Transaction sync initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncTransactionsResponse'
              example:
                Service: WalterAPI
                API: SyncTransactions
                Status: Success
                Message: Syncing user transactions!
                ResponseTimeMillis: 500.000000
                Data:
                  user_id: user-12345
                  institution_id: ins_123456
                  institution_name: Test Bank

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test@gmail.com
        password:
          type: string
          format: password
          example: test_password
    AuthResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: AuthUser
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: User authenticated!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            token:
              type: string
              description: JWT token to be used for authenticated requests
              example: TEST_TOKEN
    CreateUserRequest:
      type: object
      required:
        - email
        - first_name
        - last_name
        - password
      properties:
        email:
          type: string
          format: email
          example: test@gmail.com
        first_name:
          type: string
          example: Walter
        last_name:
          type: string
          example: White
        password:
          type: string
          format: password
          example: test_password
    User:
      type: object
      properties:
        user_id:
          type: string
          description: The unique ID for the user
          example: user-123456
        email:
          type: string
          format: email
          description: The user's email address
          example: test@gmail.com
        first_name:
          type: string
          description: The user's first name
          example: Walter
        last_name:
          type: string
          description: The user's last name
          example: White
        sign_up_date:
          type: string
          format: date-time
          description: The timestamp when the user signed up
          example: "2025-08-09T12:00:00+00:00"
        last_active_date:
          type: string
          format: date-time
          description: The timestamp when the user was last active
          example: "2025-08-09T12:00:00+00:00"
        verified:
          type: boolean
          description: Whether the user's email is verified
          example: false
    CreateUserResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: CreateUser
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: User created!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
    # Unified Accounts Schemas
    Account:
      type: object
      properties:
        account_id:
          type: string
          description: The unique ID for the account
          example: acct-123456
        user_id:
          type: string
          description: The user ID that owns this account
          example: user-abc
        account_type:
          type: string
          description: The general type of the account
          enum: [ depository, credit, investment, loan ]
          example: depository
        account_subtype:
          type: string
          description: The specific subtype of the account (e.g., checking, savings)
          example: checking
        institution_name:
          type: string
          description: The financial institution name
          example: Test Bank
        account_name:
          type: string
          description: The user-friendly name for the account
          example: Checking
        account_mask:
          type: string
          description: The last 2-4 digits of the account (masked)
          example: "1234"
        balance:
          type: number
          format: double
          description: The current account balance
          example: 1000.00
        created_at:
          type: string
          format: date-time
          description: The timestamp when the account was created
          example: "2025-08-08T12:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the account was last updated
          example: "2025-08-09T12:00:00+00:00"
        plaid_account_id:
          type: string
          nullable: true
          description: The Plaid account ID if linked
          example: acc_12345
        plaid_item_id:
          type: string
          nullable: true
          description: The Plaid item ID if linked
          example: item_abc
        plaid_last_sync_at:
          type: string
          format: date-time
          nullable: true
          description: The last time we synced this account via Plaid
          example: "2025-08-09T12:00:00+00:00"
        logo_url:
          type: string
          format: uri
          description: A URL to the account's institution logo
          example: https://example.com/logo.svg

    GetAccountsResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: GetAccounts
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Successfully retrieved accounts!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            total_num_accounts:
              type: integer
              example: 2
            total_balance:
              type: number
              format: double
              example: 12345.67
            accounts:
              type: array
              items:
                $ref: '#/components/schemas/Account'

    CreateAccountRequest:
      type: object
      required:
        - account_type
        - account_subtype
        - institution_name
        - account_name
        - account_mask
        - balance
      properties:
        account_type:
          type: string
          enum: [ depository, credit, investment, loan ]
          example: depository
        account_subtype:
          type: string
          example: checking
        institution_name:
          type: string
          example: Test Bank
        account_name:
          type: string
          example: Checking
        account_mask:
          type: string
          example: "1234"
        balance:
          type: number
          format: double
          example: 1000.00

    CreateAccountResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: CreateAccount
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Account created successfully!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            account:
              $ref: '#/components/schemas/Account'

    UpdateAccountRequest:
      type: object
      required:
        - account_id
        - account_type
        - account_subtype
        - institution_name
        - account_name
        - account_mask
        - balance
        - logo_url
      properties:
        account_id:
          type: string
          example: acct-123456
        account_type:
          type: string
          enum: [ depository, credit, investment, loan ]
          example: depository
        account_subtype:
          type: string
          example: savings
        institution_name:
          type: string
          example: Test Bank
        account_name:
          type: string
          example: Rainy Day
        account_mask:
          type: string
          example: "1234"
        balance:
          type: number
          format: double
          example: 1500.00
        logo_url:
          type: string
          format: uri
          example: https://example.com/logo.svg

    UpdateAccountResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: UpdateAccount
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Account updated successfully!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            account:
              $ref: '#/components/schemas/Account'

    DeleteAccountRequest:
      type: object
      required:
        - account_id
      properties:
        account_id:
          type: string
          example: acct-123456

    DeleteAccountResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: DeleteAccount
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Successfully deleted account!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000

    # Plaid Schemas
    CreateLinkTokenResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: CreateLinkToken
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Created link token successfully!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            link_token:
              type: string
              description: The link token to be used to initialize Plaid Link
              example: link-sandbox-12345-abcde
            expiration:
              type: string
              format: date-time
              description: The expiration date of the link token
              example: "2025-08-09T22:07:00.000000+00:00"
            request_id:
              type: string
              description: The request ID from Plaid
              example: request-id-12345
              
    ExchangePublicTokenRequest:
      type: object
      required:
        - public_token
        - institution_id
        - institution_name
        - accounts
      properties:
        public_token:
          type: string
          description: The public token received from Plaid Link
          example: public-sandbox-12345-abcde
        institution_id:
          type: string
          description: The ID of the financial institution
          example: ins_123456
        institution_name:
          type: string
          description: The name of the financial institution
          example: Test Bank
        accounts:
          type: array
          description: The accounts to link from the institution
          items:
            type: object
            properties:
              account_id:
                type: string
                description: The account ID from Plaid
                example: acc_12345
              account_name:
                type: string
                description: The name of the account
                example: Checking
              account_type:
                type: string
                description: The type of the account
                example: depository
              account_subtype:
                type: string
                description: The subtype of the account
                example: checking
              account_last_four_numbers:
                type: string
                description: The last four numbers of the account
                example: "1234"
                
    ExchangePublicTokenResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: ExchangePublicToken
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Tokens exchanged successfully!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            institution_name:
              type: string
              description: The name of the financial institution
              example: Test Bank
            num_accounts:
              type: integer
              description: The number of accounts linked
              example: 1
              
    SyncTransactionsRequest:
      type: object
      required:
        - item_id
        - webhook_code
      properties:
        item_id:
          type: string
          description: The Plaid item ID
          example: item-sandbox-12345-abcde
        webhook_code:
          type: string
          description: The webhook code from Plaid
          example: TRANSACTIONS_UPDATE
          
    SyncTransactionsResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: SyncTransactions
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Syncing user transactions!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            user_id:
              type: string
              description: The user ID
              example: user-12345
            institution_id:
              type: string
              description: The ID of the financial institution
              example: ins_123456
            institution_name:
              type: string
              description: The name of the financial institution
              example: Test Bank
          
    # Transaction Schemas
    Transaction:
      type: object
      properties:
        account_id:
          type: string
          description: The account ID
          example: account-12345
        transaction_id:
          type: string
          description: The unique identifier for the transaction
          example: abc123
        date:
          type: string
          format: date
          description: The date of the transaction
          example: "2025-08-05"
        vendor:
          type: string
          description: The vendor or merchant name
          example: Grocery Store
        amount:
          type: number
          format: double
          description: The transaction amount (negative for expenses, positive for income)
          example: -100.00
        category:
          type: string
          description: The transaction category
          example: GROCERIES
          enum: [INCOME, GROCERIES, DINING, ENTERTAINMENT, SHOPPING, TRAVEL, UTILITIES, HOUSING, TRANSPORTATION, HEALTH, EDUCATION, PERSONAL_CARE, GIFTS, CHARITY, BUSINESS, TAXES, SAVINGS, INVESTMENTS, DEBT, OTHER]
        reviewed:
          type: boolean
          description: Whether the transaction has been reviewed
          example: false
          
    BankTransaction:
      type: object
      properties:
        transaction_id:
          type: string
          description: The unique identifier for the transaction
          example: bank-txn-12345678
        account_id:
          type: string
          description: The account ID
          example: account-12345
        user_id:
          type: string
          description: The user ID
          example: user-12345
        transaction_type:
          type: string
          description: The high-level type of the transaction
          enum: [ banking ]
          example: banking
        transaction_subtype:
          type: string
          description: The specific subtype of the bank transaction
          enum: [ debit, credit, transfer ]
          example: debit
        transaction_category:
          type: string
          description: The category of the transaction
          enum: [ Bills, Entertainment, Groceries, Health and Wellness, Hobbies, Housing, Income, Insurance, Merchandise, Restaurants, Shopping, Subscriptions, Transportation, Travel, Investment ]
          example: Groceries
        transaction_date:
          type: string
          description: The transaction date combined with an internal identifier (format YYYY-MM-DD#<id>)
          example: "2025-08-08#bank-txn-1234"
        transaction_amount:
          type: number
          format: double
          description: The transaction amount
          example: -5.00
        merchant_name:
          type: string
          description: The merchant name for bank transactions
          example: Coffee Shop
    InvestmentTransaction:
      type: object
      properties:
        transaction_id:
          type: string
          description: The unique identifier for the transaction
          example: investment-txn-12345678
        account_id:
          type: string
          description: The account ID
          example: account-12345
        user_id:
          type: string
          description: The user ID
          example: user-12345
        transaction_type:
          type: string
          description: The high-level type of the transaction
          enum: [ investment ]
          example: investment
        transaction_subtype:
          type: string
          description: The specific subtype of the investment transaction
          enum: [ buy, sell ]
          example: buy
        transaction_category:
          type: string
          description: The category of the transaction
          enum: [ Bills, Entertainment, Groceries, Health and Wellness, Hobbies, Housing, Income, Insurance, Merchandise, Restaurants, Shopping, Subscriptions, Transportation, Travel, Investment ]
          example: Investment
        transaction_date:
          type: string
          description: The transaction date combined with an internal identifier (format YYYY-MM-DD#<id>)
          example: "2025-08-08#investment-txn-1234"
        transaction_amount:
          type: number
          format: double
          description: The total trade amount (quantity * price_per_share)
          example: 500.00
        security_id:
          type: string
          description: The security identifier
          example: AAPL
        quantity:
          type: number
          format: double
          description: The number of shares
          example: 2.0
        price_per_share:
          type: number
          format: double
          description: The price per share
          example: 250.00
    TransactionsResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: GetTransactions
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Retrieved transactions!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            num_transactions:
              type: integer
              description: The total number of transactions
              example: 3
            num_unreviewed_transactions:
              type: integer
              description: The number of unreviewed transactions
              example: 1
            total_income:
              type: number
              format: double
              description: The total income amount
              example: 5000.00
            total_expense:
              type: number
              format: double
              description: The total expense amount
              example: 2000.00
            cash_flow:
              type: number
              format: double
              description: The cash flow (income - expenses)
              example: 3000.00
            transactions:
              type: array
              description: The list of transactions
              items:
                $ref: '#/components/schemas/Transaction'
                
    AddTransactionRequest:
      type: object
      required:
        - account_id
        - date
        - amount
        - transaction_type
        - transaction_subtype
        - transaction_category
      properties:
        account_id:
          type: string
          description: The account ID
          example: account-12345
        date:
          type: string
          format: date
          description: The date of the transaction (YYYY-MM-DD)
          example: "2025-08-08"
        amount:
          type: number
          format: double
          description: The transaction amount (negative for expenses, positive for income)
          example: -5.00
        transaction_type:
          type: string
          description: The high-level type of the transaction
          enum: [ banking, investment ]
          example: banking
        transaction_subtype:
          type: string
          description: The specific subtype of the transaction
          enum: [ buy, sell, debit, credit, transfer ]
          example: debit
        transaction_category:
          type: string
          description: The category of the transaction
          enum: [ Bills, Entertainment, Groceries, Health and Wellness, Hobbies, Housing, Income, Insurance, Merchandise, Restaurants, Shopping, Subscriptions, Transportation, Travel, Investment ]
          example: Groceries
        merchant_name:
          type: string
          description: Required for bank transactions (debit/credit/transfer). The merchant name.
          example: Coffee Shop
        security_id:
          type: string
          description: Required for investment transactions (buy/sell). The security identifier.
          example: AAPL
        quantity:
          type: number
          format: double
          description: Required for investment transactions (buy/sell). The number of shares.
          example: 1.0
        price_per_share:
          type: number
          format: double
          description: Required for investment transactions (buy/sell). The price per share.
          example: 5.00
          
    AddTransactionResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: AddTransaction
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Transaction added!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            transaction:
              oneOf:
                - $ref: '#/components/schemas/BankTransaction'
                - $ref: '#/components/schemas/InvestmentTransaction'
              
    EditTransactionRequest:
      type: object
      required:
        - transaction_date
        - transaction_id
        - updated_date
        - updated_vendor
        - updated_amount
        - updated_category
      properties:
        transaction_date:
          type: string
          format: date
          description: The original date of the transaction (YYYY-MM-DD)
          example: "2025-08-07"
        transaction_id:
          type: string
          description: The transaction ID
          example: ghi789
        updated_date:
          type: string
          format: date
          description: The updated date of the transaction (YYYY-MM-DD)
          example: "2025-08-07"
        updated_vendor:
          type: string
          description: The updated vendor or merchant name
          example: Nice Restaurant
        updated_amount:
          type: number
          format: double
          description: The updated transaction amount
          example: -75.00
        updated_category:
          type: string
          description: The updated transaction category
          example: DINING
          enum: [INCOME, GROCERIES, DINING, ENTERTAINMENT, SHOPPING, TRAVEL, UTILITIES, HOUSING, TRANSPORTATION, HEALTH, EDUCATION, PERSONAL_CARE, GIFTS, CHARITY, BUSINESS, TAXES, SAVINGS, INVESTMENTS, DEBT, OTHER]
          
    EditTransactionResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: EditTransaction
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Transaction edited!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            transaction:
              $ref: '#/components/schemas/Transaction'
              
    DeleteTransactionRequest:
      type: object
      required:
        - transaction_date
        - transaction_id
      properties:
        transaction_date:
          type: string
          format: date
          description: The date of the transaction (YYYY-MM-DD)
          example: "2025-08-08"
        transaction_id:
          type: string
          description: The transaction ID
          example: jkl012
          
    DeleteTransactionResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: DeleteTransaction
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Transaction deleted!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000


    LoginResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: Login
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: User logged in successfully!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            user_id:
              type: string
              example: user-123456
            access_token:
              type: string
              description: JWT access token
              example: ACCESS_TOKEN
            refresh_token:
              type: string
              description: JWT refresh token
              example: REFRESH_TOKEN
            access_token_expires_at:
              type: string
              format: date-time
              example: "2025-08-09T12:00:00+00:00"
            refresh_token_expires_at:
              type: string
              format: date-time
              example: "2025-08-10T12:00:00+00:00"

    RefreshResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: Refresh
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: Access token refreshed!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
        Data:
          type: object
          properties:
            access_token:
              type: string
              description: Newly issued access token
              example: NEW_ACCESS_TOKEN
            access_token_expiration:
              type: string
              format: date-time
              description: Expiration time of the new access token
              example: "2025-08-09T13:00:00+00:00"

    LogoutResponse:
      type: object
      properties:
        Service:
          type: string
          example: WalterAPI
        API:
          type: string
          example: Logout
        Status:
          type: string
          example: Success
        Message:
          type: string
          example: User logged out successfully!
        ResponseTimeMillis:
          type: number
          format: double
          example: 500.000000
